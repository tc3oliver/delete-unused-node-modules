const fs=require("fs");const path=require("path");const projectRoot="./";function walk(dir){let files=fs.readdirSync(dir);files.forEach((file)=>{let filePath=path.join(dir,file);let stat=fs.statSync(filePath);if(stat.isDirectory()){walk(filePath)}else if(path.extname(file)===".html"){processHtmlFile(filePath)}})}function processHtmlFile(filePath){const html=fs.readFileSync(filePath,'utf8')const scriptRegex=/<script[^>]*src=["']([^"']+)["'][^>]*>\s*<\/script>/g let match while((match=scriptRegex.exec(html))!==null){const url=match[1]if(url&&url.includes('node_modules')){const importPath=path.join(projectRoot,url)const absolutePath=path.resolve(url)const match=/node_modules[\\/](.*)/.exec(absolutePath)if(match){const nodeModulesPath=match[0]console.log(nodeModulesPath)paths.push(nodeModulesPath)}else{console.log('路徑中不包含 node_modules')}console.log(importPath)}}const linkRegex=/<link[^>]*href=["']([^"']+)["'][^>]*>/g while((match=linkRegex.exec(html))!==null){const url=match[1]if(url&&url.includes('node_modules')){const importPath=path.join(projectRoot,url)const absolutePath=path.resolve(url)const match=/node_modules[\\/](.*)/.exec(absolutePath)if(match){const nodeModulesPath=match[0]console.log(nodeModulesPath)paths.push(nodeModulesPath)}else{console.log('路徑中不包含 node_modules')}console.log(importPath)}}}let paths=[];walk(projectRoot);const nodeModulesDir='node_modules'const excludedPath='icons-webfont'function deleteNM(dir){let files=fs.readdirSync(dir)files.forEach((file)=>{let filePath=path.join(dir,file)let stat=fs.statSync(filePath)if(stat.isDirectory()){if(filePath.includes(excludedPath)){return}deleteNM(filePath)}else{if(!filePath.includes(excludedPath)&&!usedPaths.includes(filePath)){fs.unlinkSync(filePath)console.log(`已刪除檔案：${filePath}`)}}})}const usedPaths=paths;deleteNM(nodeModulesDir);
